name: Front End Maxstaion

on: 
 workflow_dispatch:
  inputs:
      tags:
        description: 'Tags Image Release'
# on:
#   push:
#     branches: ["master"]
#   workflow_dispatch:

env:
  REGISTRY_DOCKER: ${{ secrets.REGISTRY_DOCKER }}
  UDOCKER: ${{ secrets.DOCKER_USER }}
  PDOCKER: ${{ secrets.DOCKER_PASSWORD }}
  APP_NAME: ${{ vars.APP_NAME }}
  IMG_VERSIONDEV: ${{ vars.IMG_VERSIONDEV }}
  IMG_VERSIONUAT: ${{ vars.IMG_VERSIONUAT }}
  IMG_VERSIONPRD: ${{ vars.IMG_VERSIONPRD }}
  RUNNUMBER: ${{ github.run_number }}
jobs:

  start_approval:
    runs-on: ubuntu-latest
    steps:
      - name: Manual Workflow Approval
        uses: trstringer/manual-approval@v1.9.0
        with:
          secret: ${{ github.TOKEN }}
          approvers: lattaponCH
          minimum-approvals: 1
          issue-title: "Start Deploying"
          issue-body: "Please approve or deny the Start Deploying "
          exclude-workflow-initiator-as-approver: false
          additional-approved-words: ''
          additional-denied-words: ''
  
  # Release:
  #   runs-on: ubuntu-latest
  #   needs: [start_approval]
  #   steps:
  #   - name: Execute if condition is true
  #     if: ${{ github.event.inputs.tags != ''}}
  #     run: echo "::set-output name=result::success"
  #     # env:
  #     #  RUNNUMBER: ${{ github.event.inputs.tags }}
  #     # run: echo ${{ env.RUNNUMBER }}

  #   - name: Execute if condition is false
  #     if: ${{ github.event.inputs.tags == ''}}
  #     run: echo "::set-output name=result::failure"
  #     # env:
  #     #  RUNNUMBER: ${{ github.run_number }}
  #     # run: echo ${{ env.RUNNUMBER }}

  # jod1: 
  #  needs: [Release]
  #  if: ${{ always() && github.event.inputs.tags == '' }}
  #  runs-on: ubuntu-latest
  #  steps:
  #    - name: show jod1
  #     #  run: echo ${{ env.RUNNUMBER }} 1
  #      run: echo "Result from previous job ${{ needs.Release.outputs.result }}"

  # jod2: 
  #  needs: [Release]
  #  if: ${{ always() && github.event.inputs.tags != '' }}
  #  runs-on: ubuntu-latest
  #  steps:
  #    - name: show jod2
  #     #  run: echo ${{ env.RUNNUMBER }} 2
  #      run: echo "Result from previous job ${{ needs.Release.outputs.result }}"


  buildImage:
    runs-on: ubuntu-latest
    needs: [start_approval]
    if: ${{ always() && github.event.inputs.tags == '' }}
    steps:
      # - name: Checkout code
      #   uses: actions/checkout@v2
      - name: Checkout code
        run: |
          git config --global user.email "lattapon.ch@pt.co.th"
          git config --global user.name "lattaponCH"
          git clone https://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@github.com/lattaponCH/pt-max-station-web-repo.git
          cd pt-max-station-web-repo
          git checkout master
          echo "Log level: ${{ github.event.inputs.logLevel }}"
          echo "Tags: ${{ github.event.inputs.tags }}"  

      - name: docker login 
        run: docker login ${{ env.REGISTRY_DOCKER }} --username  ${{ env.UDOCKER }} --password ${{ env.PDOCKER }}

      - name: Build Docker image
        run: |
          cd pt-max-station-web-repo
          docker build -t ${{ env.REGISTRY_DOCKER }}/${{ env.APP_NAME }}:${{ env.IMG_VERSIONDEV }}${{ env.RUNNUMBER}} -f Dockerfile .
      
      - name: Push Docker image
        run: docker push ${{ env.REGISTRY_DOCKER }}/${{ env.APP_NAME }}:${{ env.IMG_VERSIONDEV }}${{ env.RUNNUMBER}}

      # - name: Build Success notification
      #   uses: cinotify/github-action@main
      #   with: 
      #     to: 'lathpon5@gmail.com'
      #     subject: 'Build Success on pt-max-station-report-repo'
      #     body: 'The project {{ EVENT_PAYLOAD.repository.full_name }} has been deployed. Commit by {{ GITHUB_ACTOR }}.'

      # - name: Set up Docker Build
      #   uses: docker/setup-buildx-action@v1

      # - name: Login to GitHub Container Registry
      #   uses: docker/login-action@v2
      #   with:
      #     registry: ${{ env.REGISTRY_DOCKER }}
      #     username: ${{ env.UDOCKER }}
      #     password: ${{ env.PDOCKER }}

      # - name: Build and push the Docker image
      #   uses: docker/build-push-action@v3
      #   with:
      #     push: true
      #     tags: ${{ env.REGISTRY_DOCKER }}/${{ env.APP_NAME }}:${{ env.IMG_VERSIONDEV }}${{ env.RUNNUMBER}}

  approval_dev:
    runs-on: ubuntu-latest
    needs: [buildImage,start_approval]
    steps:
      - name: Manual Workflow Approval
        uses: trstringer/manual-approval@v1.9.0
        with:
          secret: ${{ github.TOKEN }}
          approvers: lattaponCH
          minimum-approvals: 1
          issue-title: "Deploying to Dev"
          issue-body: "Please approve or deny the deployment to Dev"
          exclude-workflow-initiator-as-approver: false
          additional-approved-words: ''
          additional-denied-words: ''

  deploy-dev:
    permissions:
      actions: read
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    needs: [approval_dev,buildImage]
    steps:
      # - name: Checkout code
      #   uses: actions/checkout@v2
      - name: Checkout code
        run: |
          git config --global user.email "lattapon.ch@pt.co.th"
          git config --global user.name "lattaponCH"
          git clone https://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@github.com/lattaponCH/pt-max-station-web-repo.git
          cd pt-max-station-web-repo
          git checkout master

      - name: Configure kubectl
        run: |
          cd pt-max-station-web-repo
          echo "${{ secrets.KUBE_CONFIG }}" > kubeconfig.yaml
          kubectl --kubeconfig=kubeconfig.yaml apply -f Deployment.yaml

      # - name: Replace image to DEV yaml
      #   run: | 
      #     sed -i 's|IMAGE_NAME|${{ env.REGISTRY_DOCKER }}/${{ env.APP_NAME }}:${{ env.IMG_VERSION }}${{ env.RUNNUMBER}}|g' Deployment.yaml
      #     cat Deployment.yaml

      - name: Deploy to AKS
        run: |
          cd pt-max-station-web-repo
          sed -i 's|IMAGE_NAME|${{ env.REGISTRY_DOCKER }}/${{ env.APP_NAME }}:${{ env.IMG_VERSIONDEV }}${{ env.RUNNUMBER}}|g' Deployment.yaml
          cat Deployment.yaml
          kubectl --kubeconfig=kubeconfig.yaml delete -f Deployment.yaml
          kubectl --kubeconfig=kubeconfig.yaml delete -f Service.yaml
          kubectl --kubeconfig=kubeconfig.yaml delete -f HorizontalPodAutoscaler.yaml

          kubectl --kubeconfig=kubeconfig.yaml apply -f Deployment.yaml
          kubectl --kubeconfig=kubeconfig.yaml apply -f Service.yaml
          kubectl --kubeconfig=kubeconfig.yaml apply -f HorizontalPodAutoscaler.yaml

  approval_UAT:
    runs-on: ubuntu-latest
    needs: [buildImage]
    steps:
      - name: Manual Workflow Approval
        uses: trstringer/manual-approval@v1.9.0
        with:
          secret: ${{ github.TOKEN }}
          approvers: lattaponCH
          minimum-approvals: 1
          issue-title: "Deploying to UAT"
          issue-body: "Please approve or deny the deployment to UAT"
          exclude-workflow-initiator-as-approver: false
          additional-approved-words: ''
          additional-denied-words: ''

  deploy-UAT:
    permissions:
      actions: read
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    needs: [approval_UAT]
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY_DOCKER }}
          username: ${{ env.UDOCKER }}
          password: ${{ env.PDOCKER }}
          
      - name: Docker image retag
        uses: tinact/docker.image-retag@1.0.3
        with:
          image_name: ${{ env.APP_NAME }}
          image_old_tag: ${{ env.IMG_VERSIONDEV }}${{ env.RUNNUMBER}}
          image_new_tag: ${{ env.IMG_VERSIONUAT }}${{ env.RUNNUMBER}}
          registry: ${{ env.REGISTRY_DOCKER }}
          registry_username: ${{ env.UDOCKER }}
          registry_password: ${{ env.PDOCKER }}

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" > kubeconfig.yaml
          kubectl --kubeconfig=kubeconfig.yaml apply -f Deployment.yaml

      - name: Replace image to UAT yaml
        run: | 
          sed -i 's|IMAGE_NAME|${{ env.REGISTRY_DOCKER }}/${{ env.APP_NAME }}:${{ env.IMG_VERSIONUAT }}${{ env.RUNNUMBER}}|g' Deployment.yaml
          cat Deployment.yaml

      # - name: Deploy to AKS
      #   run: |
      #     kubectl --kubeconfig=kubeconfig.yaml apply -f Deployment.yaml
      #     kubectl --kubeconfig=kubeconfig.yaml apply -f Service.yaml
      #     kubectl --kubeconfig=kubeconfig.yaml apply -f HorizontalPodAutoscaler.yaml

  approval_PRD:
    runs-on: ubuntu-latest
    needs: [buildImage,deploy-UAT]
    steps:
      - name: Manual Workflow Approval
        uses: trstringer/manual-approval@v1.9.0
        with:
          secret: ${{ github.TOKEN }}
          approvers: lattaponCH
          minimum-approvals: 1
          issue-title: "Deploying to PROD"
          issue-body: "Please approve or deny the deployment to PROD"
          exclude-workflow-initiator-as-approver: false
          additional-approved-words: ''
          additional-denied-words: ''

  deploy-PRD:
    permissions:
      actions: read
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    needs: [approval_PRD]
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY_DOCKER }}
          username: ${{ env.UDOCKER }}
          password: ${{ env.PDOCKER }}

      - name: Docker image retag
        uses: tinact/docker.image-retag@1.0.3
        with:
          image_name: ${{ env.APP_NAME }}
          image_old_tag: ${{ env.IMG_VERSIONUAT }}${{ env.RUNNUMBER}}
          image_new_tag: ${{ env.IMG_VERSIONPRD }}${{ env.RUNNUMBER}}
          registry: ${{ env.REGISTRY_DOCKER }}
          registry_username: ${{ env.UDOCKER }}
          registry_password: ${{ env.PDOCKER }}

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" > kubeconfig.yaml
          kubectl --kubeconfig=kubeconfig.yaml apply -f Deployment.yaml

      - name: Replace image to PROD yaml
        run: | 
          sed -i 's|IMAGE_NAME|${{ env.REGISTRY_DOCKER }}/${{ env.APP_NAME }}:${{ env.IMG_VERSIONPRD }}${{ env.RUNNUMBER}}|g' Deployment.yaml
          cat Deployment.yaml

      # - name: Deploy to AKS
      #   run: |
      #     kubectl --kubeconfig=kubeconfig.yaml apply -f Deployment.yaml
      #     kubectl --kubeconfig=kubeconfig.yaml apply -f Service.yaml
      #     kubectl --kubeconfig=kubeconfig.yaml apply -f HorizontalPodAutoscaler.yaml

  Release:
    runs-on: ubuntu-latest
    needs: [start_approval]
    if: ${{ always() && github.event.inputs.tags != '' }}
    steps:
    - name: Release Version
      run: echo ${{github.event.inputs.tags}}